/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '../../src/agGridNg2';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/linker/query_list';
import * as import7 from '@angular/core/src/di/injector';
import * as import8 from '@angular/core/src/linker/view_type';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '../../src/ng2FrameworkFactory';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/component_factory';
export class Wrapper_AgGridNg2 {
  context:import0.AgGridNg2;
  changed:boolean;
  changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  /*private*/ _expr_21:any;
  /*private*/ _expr_22:any;
  /*private*/ _expr_23:any;
  /*private*/ _expr_24:any;
  /*private*/ _expr_25:any;
  /*private*/ _expr_26:any;
  /*private*/ _expr_27:any;
  /*private*/ _expr_28:any;
  /*private*/ _expr_29:any;
  /*private*/ _expr_30:any;
  /*private*/ _expr_31:any;
  /*private*/ _expr_32:any;
  /*private*/ _expr_33:any;
  /*private*/ _expr_34:any;
  /*private*/ _expr_35:any;
  /*private*/ _expr_36:any;
  /*private*/ _expr_37:any;
  /*private*/ _expr_38:any;
  /*private*/ _expr_39:any;
  /*private*/ _expr_40:any;
  /*private*/ _expr_41:any;
  /*private*/ _expr_42:any;
  /*private*/ _expr_43:any;
  /*private*/ _expr_44:any;
  /*private*/ _expr_45:any;
  /*private*/ _expr_46:any;
  /*private*/ _expr_47:any;
  /*private*/ _expr_48:any;
  /*private*/ _expr_49:any;
  /*private*/ _expr_50:any;
  /*private*/ _expr_51:any;
  /*private*/ _expr_52:any;
  /*private*/ _expr_53:any;
  /*private*/ _expr_54:any;
  /*private*/ _expr_55:any;
  /*private*/ _expr_56:any;
  /*private*/ _expr_57:any;
  /*private*/ _expr_58:any;
  /*private*/ _expr_59:any;
  /*private*/ _expr_60:any;
  /*private*/ _expr_61:any;
  /*private*/ _expr_62:any;
  /*private*/ _expr_63:any;
  /*private*/ _expr_64:any;
  /*private*/ _expr_65:any;
  /*private*/ _expr_66:any;
  /*private*/ _expr_67:any;
  /*private*/ _expr_68:any;
  /*private*/ _expr_69:any;
  /*private*/ _expr_70:any;
  /*private*/ _expr_71:any;
  /*private*/ _expr_72:any;
  /*private*/ _expr_73:any;
  /*private*/ _expr_74:any;
  /*private*/ _expr_75:any;
  /*private*/ _expr_76:any;
  /*private*/ _expr_77:any;
  /*private*/ _expr_78:any;
  /*private*/ _expr_79:any;
  /*private*/ _expr_80:any;
  /*private*/ _expr_81:any;
  /*private*/ _expr_82:any;
  /*private*/ _expr_83:any;
  /*private*/ _expr_84:any;
  /*private*/ _expr_85:any;
  /*private*/ _expr_86:any;
  /*private*/ _expr_87:any;
  /*private*/ _expr_88:any;
  /*private*/ _expr_89:any;
  /*private*/ _expr_90:any;
  /*private*/ _expr_91:any;
  /*private*/ _expr_92:any;
  /*private*/ _expr_93:any;
  /*private*/ _expr_94:any;
  /*private*/ _expr_95:any;
  /*private*/ _expr_96:any;
  /*private*/ _expr_97:any;
  /*private*/ _expr_98:any;
  /*private*/ _expr_99:any;
  /*private*/ _expr_100:any;
  /*private*/ _expr_101:any;
  /*private*/ _expr_102:any;
  /*private*/ _expr_103:any;
  /*private*/ _expr_104:any;
  /*private*/ _expr_105:any;
  /*private*/ _expr_106:any;
  /*private*/ _expr_107:any;
  /*private*/ _expr_108:any;
  /*private*/ _expr_109:any;
  /*private*/ _expr_110:any;
  /*private*/ _expr_111:any;
  /*private*/ _expr_112:any;
  /*private*/ _expr_113:any;
  /*private*/ _expr_114:any;
  /*private*/ _expr_115:any;
  /*private*/ _expr_116:any;
  /*private*/ _expr_117:any;
  /*private*/ _expr_118:any;
  /*private*/ _expr_119:any;
  /*private*/ _expr_120:any;
  /*private*/ _expr_121:any;
  /*private*/ _expr_122:any;
  /*private*/ _expr_123:any;
  /*private*/ _expr_124:any;
  /*private*/ _expr_125:any;
  /*private*/ _expr_126:any;
  /*private*/ _expr_127:any;
  /*private*/ _expr_128:any;
  /*private*/ _expr_129:any;
  /*private*/ _expr_130:any;
  /*private*/ _expr_131:any;
  /*private*/ _expr_132:any;
  /*private*/ _expr_133:any;
  /*private*/ _expr_134:any;
  /*private*/ _expr_135:any;
  /*private*/ _expr_136:any;
  /*private*/ _expr_137:any;
  /*private*/ _expr_138:any;
  /*private*/ _expr_139:any;
  /*private*/ _expr_140:any;
  /*private*/ _expr_141:any;
  /*private*/ _expr_142:any;
  /*private*/ _expr_143:any;
  /*private*/ _expr_144:any;
  /*private*/ _expr_145:any;
  /*private*/ _expr_146:any;
  /*private*/ _expr_147:any;
  /*private*/ _expr_148:any;
  /*private*/ _expr_149:any;
  constructor(p0:any,p1:any,p2:any) {
    this.changed = false;
    this.changes = {};
    this.context = new import0.AgGridNg2(p0,p1,p2);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
    this._expr_19 = import1.UNINITIALIZED;
    this._expr_20 = import1.UNINITIALIZED;
    this._expr_21 = import1.UNINITIALIZED;
    this._expr_22 = import1.UNINITIALIZED;
    this._expr_23 = import1.UNINITIALIZED;
    this._expr_24 = import1.UNINITIALIZED;
    this._expr_25 = import1.UNINITIALIZED;
    this._expr_26 = import1.UNINITIALIZED;
    this._expr_27 = import1.UNINITIALIZED;
    this._expr_28 = import1.UNINITIALIZED;
    this._expr_29 = import1.UNINITIALIZED;
    this._expr_30 = import1.UNINITIALIZED;
    this._expr_31 = import1.UNINITIALIZED;
    this._expr_32 = import1.UNINITIALIZED;
    this._expr_33 = import1.UNINITIALIZED;
    this._expr_34 = import1.UNINITIALIZED;
    this._expr_35 = import1.UNINITIALIZED;
    this._expr_36 = import1.UNINITIALIZED;
    this._expr_37 = import1.UNINITIALIZED;
    this._expr_38 = import1.UNINITIALIZED;
    this._expr_39 = import1.UNINITIALIZED;
    this._expr_40 = import1.UNINITIALIZED;
    this._expr_41 = import1.UNINITIALIZED;
    this._expr_42 = import1.UNINITIALIZED;
    this._expr_43 = import1.UNINITIALIZED;
    this._expr_44 = import1.UNINITIALIZED;
    this._expr_45 = import1.UNINITIALIZED;
    this._expr_46 = import1.UNINITIALIZED;
    this._expr_47 = import1.UNINITIALIZED;
    this._expr_48 = import1.UNINITIALIZED;
    this._expr_49 = import1.UNINITIALIZED;
    this._expr_50 = import1.UNINITIALIZED;
    this._expr_51 = import1.UNINITIALIZED;
    this._expr_52 = import1.UNINITIALIZED;
    this._expr_53 = import1.UNINITIALIZED;
    this._expr_54 = import1.UNINITIALIZED;
    this._expr_55 = import1.UNINITIALIZED;
    this._expr_56 = import1.UNINITIALIZED;
    this._expr_57 = import1.UNINITIALIZED;
    this._expr_58 = import1.UNINITIALIZED;
    this._expr_59 = import1.UNINITIALIZED;
    this._expr_60 = import1.UNINITIALIZED;
    this._expr_61 = import1.UNINITIALIZED;
    this._expr_62 = import1.UNINITIALIZED;
    this._expr_63 = import1.UNINITIALIZED;
    this._expr_64 = import1.UNINITIALIZED;
    this._expr_65 = import1.UNINITIALIZED;
    this._expr_66 = import1.UNINITIALIZED;
    this._expr_67 = import1.UNINITIALIZED;
    this._expr_68 = import1.UNINITIALIZED;
    this._expr_69 = import1.UNINITIALIZED;
    this._expr_70 = import1.UNINITIALIZED;
    this._expr_71 = import1.UNINITIALIZED;
    this._expr_72 = import1.UNINITIALIZED;
    this._expr_73 = import1.UNINITIALIZED;
    this._expr_74 = import1.UNINITIALIZED;
    this._expr_75 = import1.UNINITIALIZED;
    this._expr_76 = import1.UNINITIALIZED;
    this._expr_77 = import1.UNINITIALIZED;
    this._expr_78 = import1.UNINITIALIZED;
    this._expr_79 = import1.UNINITIALIZED;
    this._expr_80 = import1.UNINITIALIZED;
    this._expr_81 = import1.UNINITIALIZED;
    this._expr_82 = import1.UNINITIALIZED;
    this._expr_83 = import1.UNINITIALIZED;
    this._expr_84 = import1.UNINITIALIZED;
    this._expr_85 = import1.UNINITIALIZED;
    this._expr_86 = import1.UNINITIALIZED;
    this._expr_87 = import1.UNINITIALIZED;
    this._expr_88 = import1.UNINITIALIZED;
    this._expr_89 = import1.UNINITIALIZED;
    this._expr_90 = import1.UNINITIALIZED;
    this._expr_91 = import1.UNINITIALIZED;
    this._expr_92 = import1.UNINITIALIZED;
    this._expr_93 = import1.UNINITIALIZED;
    this._expr_94 = import1.UNINITIALIZED;
    this._expr_95 = import1.UNINITIALIZED;
    this._expr_96 = import1.UNINITIALIZED;
    this._expr_97 = import1.UNINITIALIZED;
    this._expr_98 = import1.UNINITIALIZED;
    this._expr_99 = import1.UNINITIALIZED;
    this._expr_100 = import1.UNINITIALIZED;
    this._expr_101 = import1.UNINITIALIZED;
    this._expr_102 = import1.UNINITIALIZED;
    this._expr_103 = import1.UNINITIALIZED;
    this._expr_104 = import1.UNINITIALIZED;
    this._expr_105 = import1.UNINITIALIZED;
    this._expr_106 = import1.UNINITIALIZED;
    this._expr_107 = import1.UNINITIALIZED;
    this._expr_108 = import1.UNINITIALIZED;
    this._expr_109 = import1.UNINITIALIZED;
    this._expr_110 = import1.UNINITIALIZED;
    this._expr_111 = import1.UNINITIALIZED;
    this._expr_112 = import1.UNINITIALIZED;
    this._expr_113 = import1.UNINITIALIZED;
    this._expr_114 = import1.UNINITIALIZED;
    this._expr_115 = import1.UNINITIALIZED;
    this._expr_116 = import1.UNINITIALIZED;
    this._expr_117 = import1.UNINITIALIZED;
    this._expr_118 = import1.UNINITIALIZED;
    this._expr_119 = import1.UNINITIALIZED;
    this._expr_120 = import1.UNINITIALIZED;
    this._expr_121 = import1.UNINITIALIZED;
    this._expr_122 = import1.UNINITIALIZED;
    this._expr_123 = import1.UNINITIALIZED;
    this._expr_124 = import1.UNINITIALIZED;
    this._expr_125 = import1.UNINITIALIZED;
    this._expr_126 = import1.UNINITIALIZED;
    this._expr_127 = import1.UNINITIALIZED;
    this._expr_128 = import1.UNINITIALIZED;
    this._expr_129 = import1.UNINITIALIZED;
    this._expr_130 = import1.UNINITIALIZED;
    this._expr_131 = import1.UNINITIALIZED;
    this._expr_132 = import1.UNINITIALIZED;
    this._expr_133 = import1.UNINITIALIZED;
    this._expr_134 = import1.UNINITIALIZED;
    this._expr_135 = import1.UNINITIALIZED;
    this._expr_136 = import1.UNINITIALIZED;
    this._expr_137 = import1.UNINITIALIZED;
    this._expr_138 = import1.UNINITIALIZED;
    this._expr_139 = import1.UNINITIALIZED;
    this._expr_140 = import1.UNINITIALIZED;
    this._expr_141 = import1.UNINITIALIZED;
    this._expr_142 = import1.UNINITIALIZED;
    this._expr_143 = import1.UNINITIALIZED;
    this._expr_144 = import1.UNINITIALIZED;
    this._expr_145 = import1.UNINITIALIZED;
    this._expr_146 = import1.UNINITIALIZED;
    this._expr_147 = import1.UNINITIALIZED;
    this._expr_148 = import1.UNINITIALIZED;
    this._expr_149 = import1.UNINITIALIZED;
  }
  check_gridOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this.changed = true;
      this.context.gridOptions = currValue;
      this.changes['gridOptions'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_slaveGrids(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this.changed = true;
      this.context.slaveGrids = currValue;
      this.changes['slaveGrids'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_rowData(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this.changed = true;
      this.context.rowData = currValue;
      this.changes['rowData'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_floatingTopRowData(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this.changed = true;
      this.context.floatingTopRowData = currValue;
      this.changes['floatingTopRowData'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_floatingBottomRowData(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this.changed = true;
      this.context.floatingBottomRowData = currValue;
      this.changes['floatingBottomRowData'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_columnDefs(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this.changed = true;
      this.context.columnDefs = currValue;
      this.changes['columnDefs'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_defaultColDef(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this.changed = true;
      this.context.defaultColDef = currValue;
      this.changes['defaultColDef'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_rowStyle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this.changed = true;
      this.context.rowStyle = currValue;
      this.changes['rowStyle'] = new import1.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  check_context(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this.changed = true;
      this.context.context = currValue;
      this.changes['context'] = new import1.SimpleChange(this._expr_8,currValue);
      this._expr_8 = currValue;
    }
  }
  check_groupColumnDef(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this.changed = true;
      this.context.groupColumnDef = currValue;
      this.changes['groupColumnDef'] = new import1.SimpleChange(this._expr_9,currValue);
      this._expr_9 = currValue;
    }
  }
  check_localeText(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this.changed = true;
      this.context.localeText = currValue;
      this.changes['localeText'] = new import1.SimpleChange(this._expr_10,currValue);
      this._expr_10 = currValue;
    }
  }
  check_icons(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this.changed = true;
      this.context.icons = currValue;
      this.changes['icons'] = new import1.SimpleChange(this._expr_11,currValue);
      this._expr_11 = currValue;
    }
  }
  check_datasource(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this.changed = true;
      this.context.datasource = currValue;
      this.changes['datasource'] = new import1.SimpleChange(this._expr_12,currValue);
      this._expr_12 = currValue;
    }
  }
  check_viewportDatasource(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this.changed = true;
      this.context.viewportDatasource = currValue;
      this.changes['viewportDatasource'] = new import1.SimpleChange(this._expr_13,currValue);
      this._expr_13 = currValue;
    }
  }
  check_groupRowRendererParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_14,currValue))) {
      this.changed = true;
      this.context.groupRowRendererParams = currValue;
      this.changes['groupRowRendererParams'] = new import1.SimpleChange(this._expr_14,currValue);
      this._expr_14 = currValue;
    }
  }
  check_aggFuncs(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_15,currValue))) {
      this.changed = true;
      this.context.aggFuncs = currValue;
      this.changes['aggFuncs'] = new import1.SimpleChange(this._expr_15,currValue);
      this._expr_15 = currValue;
    }
  }
  check_fullWidthCellRendererParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_16,currValue))) {
      this.changed = true;
      this.context.fullWidthCellRendererParams = currValue;
      this.changes['fullWidthCellRendererParams'] = new import1.SimpleChange(this._expr_16,currValue);
      this._expr_16 = currValue;
    }
  }
  check_sortingOrder(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_17,currValue))) {
      this.changed = true;
      this.context.sortingOrder = currValue;
      this.changes['sortingOrder'] = new import1.SimpleChange(this._expr_17,currValue);
      this._expr_17 = currValue;
    }
  }
  check_rowClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_18,currValue))) {
      this.changed = true;
      this.context.rowClass = currValue;
      this.changes['rowClass'] = new import1.SimpleChange(this._expr_18,currValue);
      this._expr_18 = currValue;
    }
  }
  check_rowSelection(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_19,currValue))) {
      this.changed = true;
      this.context.rowSelection = currValue;
      this.changes['rowSelection'] = new import1.SimpleChange(this._expr_19,currValue);
      this._expr_19 = currValue;
    }
  }
  check_overlayLoadingTemplate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_20,currValue))) {
      this.changed = true;
      this.context.overlayLoadingTemplate = currValue;
      this.changes['overlayLoadingTemplate'] = new import1.SimpleChange(this._expr_20,currValue);
      this._expr_20 = currValue;
    }
  }
  check_overlayNoRowsTemplate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_21,currValue))) {
      this.changed = true;
      this.context.overlayNoRowsTemplate = currValue;
      this.changes['overlayNoRowsTemplate'] = new import1.SimpleChange(this._expr_21,currValue);
      this._expr_21 = currValue;
    }
  }
  check_headerCellTemplate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_22,currValue))) {
      this.changed = true;
      this.context.headerCellTemplate = currValue;
      this.changes['headerCellTemplate'] = new import1.SimpleChange(this._expr_22,currValue);
      this._expr_22 = currValue;
    }
  }
  check_quickFilterText(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_23,currValue))) {
      this.changed = true;
      this.context.quickFilterText = currValue;
      this.changes['quickFilterText'] = new import1.SimpleChange(this._expr_23,currValue);
      this._expr_23 = currValue;
    }
  }
  check_rowModelType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_24,currValue))) {
      this.changed = true;
      this.context.rowModelType = currValue;
      this.changes['rowModelType'] = new import1.SimpleChange(this._expr_24,currValue);
      this._expr_24 = currValue;
    }
  }
  check_rowHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_25,currValue))) {
      this.changed = true;
      this.context.rowHeight = currValue;
      this.changes['rowHeight'] = new import1.SimpleChange(this._expr_25,currValue);
      this._expr_25 = currValue;
    }
  }
  check_rowBuffer(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_26,currValue))) {
      this.changed = true;
      this.context.rowBuffer = currValue;
      this.changes['rowBuffer'] = new import1.SimpleChange(this._expr_26,currValue);
      this._expr_26 = currValue;
    }
  }
  check_colWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_27,currValue))) {
      this.changed = true;
      this.context.colWidth = currValue;
      this.changes['colWidth'] = new import1.SimpleChange(this._expr_27,currValue);
      this._expr_27 = currValue;
    }
  }
  check_headerHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_28,currValue))) {
      this.changed = true;
      this.context.headerHeight = currValue;
      this.changes['headerHeight'] = new import1.SimpleChange(this._expr_28,currValue);
      this._expr_28 = currValue;
    }
  }
  check_groupDefaultExpanded(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_29,currValue))) {
      this.changed = true;
      this.context.groupDefaultExpanded = currValue;
      this.changes['groupDefaultExpanded'] = new import1.SimpleChange(this._expr_29,currValue);
      this._expr_29 = currValue;
    }
  }
  check_minColWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_30,currValue))) {
      this.changed = true;
      this.context.minColWidth = currValue;
      this.changes['minColWidth'] = new import1.SimpleChange(this._expr_30,currValue);
      this._expr_30 = currValue;
    }
  }
  check_maxColWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_31,currValue))) {
      this.changed = true;
      this.context.maxColWidth = currValue;
      this.changes['maxColWidth'] = new import1.SimpleChange(this._expr_31,currValue);
      this._expr_31 = currValue;
    }
  }
  check_viewportRowModelPageSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_32,currValue))) {
      this.changed = true;
      this.context.viewportRowModelPageSize = currValue;
      this.changes['viewportRowModelPageSize'] = new import1.SimpleChange(this._expr_32,currValue);
      this._expr_32 = currValue;
    }
  }
  check_viewportRowModelBufferSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_33,currValue))) {
      this.changed = true;
      this.context.viewportRowModelBufferSize = currValue;
      this.changes['viewportRowModelBufferSize'] = new import1.SimpleChange(this._expr_33,currValue);
      this._expr_33 = currValue;
    }
  }
  check_layoutInterval(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_34,currValue))) {
      this.changed = true;
      this.context.layoutInterval = currValue;
      this.changes['layoutInterval'] = new import1.SimpleChange(this._expr_34,currValue);
      this._expr_34 = currValue;
    }
  }
  check_autoSizePadding(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_35,currValue))) {
      this.changed = true;
      this.context.autoSizePadding = currValue;
      this.changes['autoSizePadding'] = new import1.SimpleChange(this._expr_35,currValue);
      this._expr_35 = currValue;
    }
  }
  check_maxPagesInCache(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_36,currValue))) {
      this.changed = true;
      this.context.maxPagesInCache = currValue;
      this.changes['maxPagesInCache'] = new import1.SimpleChange(this._expr_36,currValue);
      this._expr_36 = currValue;
    }
  }
  check_maxConcurrentDatasourceRequests(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_37,currValue))) {
      this.changed = true;
      this.context.maxConcurrentDatasourceRequests = currValue;
      this.changes['maxConcurrentDatasourceRequests'] = new import1.SimpleChange(this._expr_37,currValue);
      this._expr_37 = currValue;
    }
  }
  check_paginationOverflowSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_38,currValue))) {
      this.changed = true;
      this.context.paginationOverflowSize = currValue;
      this.changes['paginationOverflowSize'] = new import1.SimpleChange(this._expr_38,currValue);
      this._expr_38 = currValue;
    }
  }
  check_paginationPageSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_39,currValue))) {
      this.changed = true;
      this.context.paginationPageSize = currValue;
      this.changes['paginationPageSize'] = new import1.SimpleChange(this._expr_39,currValue);
      this._expr_39 = currValue;
    }
  }
  check_paginationInitialRowCount(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_40,currValue))) {
      this.changed = true;
      this.context.paginationInitialRowCount = currValue;
      this.changes['paginationInitialRowCount'] = new import1.SimpleChange(this._expr_40,currValue);
      this._expr_40 = currValue;
    }
  }
  check_headerCellRenderer(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_41,currValue))) {
      this.changed = true;
      this.context.headerCellRenderer = currValue;
      this.changes['headerCellRenderer'] = new import1.SimpleChange(this._expr_41,currValue);
      this._expr_41 = currValue;
    }
  }
  check_localeTextFunc(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_42,currValue))) {
      this.changed = true;
      this.context.localeTextFunc = currValue;
      this.changes['localeTextFunc'] = new import1.SimpleChange(this._expr_42,currValue);
      this._expr_42 = currValue;
    }
  }
  check_groupRowInnerRenderer(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_43,currValue))) {
      this.changed = true;
      this.context.groupRowInnerRenderer = currValue;
      this.changes['groupRowInnerRenderer'] = new import1.SimpleChange(this._expr_43,currValue);
      this._expr_43 = currValue;
    }
  }
  check_groupRowRenderer(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_44,currValue))) {
      this.changed = true;
      this.context.groupRowRenderer = currValue;
      this.changes['groupRowRenderer'] = new import1.SimpleChange(this._expr_44,currValue);
      this._expr_44 = currValue;
    }
  }
  check_isScrollLag(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_45,currValue))) {
      this.changed = true;
      this.context.isScrollLag = currValue;
      this.changes['isScrollLag'] = new import1.SimpleChange(this._expr_45,currValue);
      this._expr_45 = currValue;
    }
  }
  check_isExternalFilterPresent(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_46,currValue))) {
      this.changed = true;
      this.context.isExternalFilterPresent = currValue;
      this.changes['isExternalFilterPresent'] = new import1.SimpleChange(this._expr_46,currValue);
      this._expr_46 = currValue;
    }
  }
  check_getRowHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_47,currValue))) {
      this.changed = true;
      this.context.getRowHeight = currValue;
      this.changes['getRowHeight'] = new import1.SimpleChange(this._expr_47,currValue);
      this._expr_47 = currValue;
    }
  }
  check_doesExternalFilterPass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_48,currValue))) {
      this.changed = true;
      this.context.doesExternalFilterPass = currValue;
      this.changes['doesExternalFilterPass'] = new import1.SimpleChange(this._expr_48,currValue);
      this._expr_48 = currValue;
    }
  }
  check_getRowClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_49,currValue))) {
      this.changed = true;
      this.context.getRowClass = currValue;
      this.changes['getRowClass'] = new import1.SimpleChange(this._expr_49,currValue);
      this._expr_49 = currValue;
    }
  }
  check_getRowStyle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_50,currValue))) {
      this.changed = true;
      this.context.getRowStyle = currValue;
      this.changes['getRowStyle'] = new import1.SimpleChange(this._expr_50,currValue);
      this._expr_50 = currValue;
    }
  }
  check_getHeaderCellTemplate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_51,currValue))) {
      this.changed = true;
      this.context.getHeaderCellTemplate = currValue;
      this.changes['getHeaderCellTemplate'] = new import1.SimpleChange(this._expr_51,currValue);
      this._expr_51 = currValue;
    }
  }
  check_traverseNode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_52,currValue))) {
      this.changed = true;
      this.context.traverseNode = currValue;
      this.changes['traverseNode'] = new import1.SimpleChange(this._expr_52,currValue);
      this._expr_52 = currValue;
    }
  }
  check_getContextMenuItems(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_53,currValue))) {
      this.changed = true;
      this.context.getContextMenuItems = currValue;
      this.changes['getContextMenuItems'] = new import1.SimpleChange(this._expr_53,currValue);
      this._expr_53 = currValue;
    }
  }
  check_getMainMenuItems(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_54,currValue))) {
      this.changed = true;
      this.context.getMainMenuItems = currValue;
      this.changes['getMainMenuItems'] = new import1.SimpleChange(this._expr_54,currValue);
      this._expr_54 = currValue;
    }
  }
  check_processRowPostCreate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_55,currValue))) {
      this.changed = true;
      this.context.processRowPostCreate = currValue;
      this.changes['processRowPostCreate'] = new import1.SimpleChange(this._expr_55,currValue);
      this._expr_55 = currValue;
    }
  }
  check_processCellForClipboard(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_56,currValue))) {
      this.changed = true;
      this.context.processCellForClipboard = currValue;
      this.changes['processCellForClipboard'] = new import1.SimpleChange(this._expr_56,currValue);
      this._expr_56 = currValue;
    }
  }
  check_getNodeChildDetails(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_57,currValue))) {
      this.changed = true;
      this.context.getNodeChildDetails = currValue;
      this.changes['getNodeChildDetails'] = new import1.SimpleChange(this._expr_57,currValue);
      this._expr_57 = currValue;
    }
  }
  check_groupRowAggNodes(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_58,currValue))) {
      this.changed = true;
      this.context.groupRowAggNodes = currValue;
      this.changes['groupRowAggNodes'] = new import1.SimpleChange(this._expr_58,currValue);
      this._expr_58 = currValue;
    }
  }
  check_getRowNodeId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_59,currValue))) {
      this.changed = true;
      this.context.getRowNodeId = currValue;
      this.changes['getRowNodeId'] = new import1.SimpleChange(this._expr_59,currValue);
      this._expr_59 = currValue;
    }
  }
  check_isFullWidthCell(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_60,currValue))) {
      this.changed = true;
      this.context.isFullWidthCell = currValue;
      this.changes['isFullWidthCell'] = new import1.SimpleChange(this._expr_60,currValue);
      this._expr_60 = currValue;
    }
  }
  check_fullWidthCellRenderer(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_61,currValue))) {
      this.changed = true;
      this.context.fullWidthCellRenderer = currValue;
      this.changes['fullWidthCellRenderer'] = new import1.SimpleChange(this._expr_61,currValue);
      this._expr_61 = currValue;
    }
  }
  check_doesDataFlower(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_62,currValue))) {
      this.changed = true;
      this.context.doesDataFlower = currValue;
      this.changes['doesDataFlower'] = new import1.SimpleChange(this._expr_62,currValue);
      this._expr_62 = currValue;
    }
  }
  check_toolPanelSuppressRowGroups(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_63,currValue))) {
      this.changed = true;
      this.context.toolPanelSuppressRowGroups = currValue;
      this.changes['toolPanelSuppressRowGroups'] = new import1.SimpleChange(this._expr_63,currValue);
      this._expr_63 = currValue;
    }
  }
  check_toolPanelSuppressValues(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_64,currValue))) {
      this.changed = true;
      this.context.toolPanelSuppressValues = currValue;
      this.changes['toolPanelSuppressValues'] = new import1.SimpleChange(this._expr_64,currValue);
      this._expr_64 = currValue;
    }
  }
  check_toolPanelSuppressPivots(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_65,currValue))) {
      this.changed = true;
      this.context.toolPanelSuppressPivots = currValue;
      this.changes['toolPanelSuppressPivots'] = new import1.SimpleChange(this._expr_65,currValue);
      this._expr_65 = currValue;
    }
  }
  check_toolPanelSuppressPivotMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_66,currValue))) {
      this.changed = true;
      this.context.toolPanelSuppressPivotMode = currValue;
      this.changes['toolPanelSuppressPivotMode'] = new import1.SimpleChange(this._expr_66,currValue);
      this._expr_66 = currValue;
    }
  }
  check_suppressRowClickSelection(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_67,currValue))) {
      this.changed = true;
      this.context.suppressRowClickSelection = currValue;
      this.changes['suppressRowClickSelection'] = new import1.SimpleChange(this._expr_67,currValue);
      this._expr_67 = currValue;
    }
  }
  check_suppressCellSelection(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_68,currValue))) {
      this.changed = true;
      this.context.suppressCellSelection = currValue;
      this.changes['suppressCellSelection'] = new import1.SimpleChange(this._expr_68,currValue);
      this._expr_68 = currValue;
    }
  }
  check_suppressHorizontalScroll(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_69,currValue))) {
      this.changed = true;
      this.context.suppressHorizontalScroll = currValue;
      this.changes['suppressHorizontalScroll'] = new import1.SimpleChange(this._expr_69,currValue);
      this._expr_69 = currValue;
    }
  }
  check_debug(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_70,currValue))) {
      this.changed = true;
      this.context.debug = currValue;
      this.changes['debug'] = new import1.SimpleChange(this._expr_70,currValue);
      this._expr_70 = currValue;
    }
  }
  check_enableColResize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_71,currValue))) {
      this.changed = true;
      this.context.enableColResize = currValue;
      this.changes['enableColResize'] = new import1.SimpleChange(this._expr_71,currValue);
      this._expr_71 = currValue;
    }
  }
  check_enableCellExpressions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_72,currValue))) {
      this.changed = true;
      this.context.enableCellExpressions = currValue;
      this.changes['enableCellExpressions'] = new import1.SimpleChange(this._expr_72,currValue);
      this._expr_72 = currValue;
    }
  }
  check_enableSorting(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_73,currValue))) {
      this.changed = true;
      this.context.enableSorting = currValue;
      this.changes['enableSorting'] = new import1.SimpleChange(this._expr_73,currValue);
      this._expr_73 = currValue;
    }
  }
  check_enableServerSideSorting(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_74,currValue))) {
      this.changed = true;
      this.context.enableServerSideSorting = currValue;
      this.changes['enableServerSideSorting'] = new import1.SimpleChange(this._expr_74,currValue);
      this._expr_74 = currValue;
    }
  }
  check_enableFilter(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_75,currValue))) {
      this.changed = true;
      this.context.enableFilter = currValue;
      this.changes['enableFilter'] = new import1.SimpleChange(this._expr_75,currValue);
      this._expr_75 = currValue;
    }
  }
  check_enableServerSideFilter(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_76,currValue))) {
      this.changed = true;
      this.context.enableServerSideFilter = currValue;
      this.changes['enableServerSideFilter'] = new import1.SimpleChange(this._expr_76,currValue);
      this._expr_76 = currValue;
    }
  }
  check_angularCompileRows(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_77,currValue))) {
      this.changed = true;
      this.context.angularCompileRows = currValue;
      this.changes['angularCompileRows'] = new import1.SimpleChange(this._expr_77,currValue);
      this._expr_77 = currValue;
    }
  }
  check_angularCompileFilters(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_78,currValue))) {
      this.changed = true;
      this.context.angularCompileFilters = currValue;
      this.changes['angularCompileFilters'] = new import1.SimpleChange(this._expr_78,currValue);
      this._expr_78 = currValue;
    }
  }
  check_angularCompileHeaders(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_79,currValue))) {
      this.changed = true;
      this.context.angularCompileHeaders = currValue;
      this.changes['angularCompileHeaders'] = new import1.SimpleChange(this._expr_79,currValue);
      this._expr_79 = currValue;
    }
  }
  check_groupSuppressAutoColumn(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_80,currValue))) {
      this.changed = true;
      this.context.groupSuppressAutoColumn = currValue;
      this.changes['groupSuppressAutoColumn'] = new import1.SimpleChange(this._expr_80,currValue);
      this._expr_80 = currValue;
    }
  }
  check_groupSelectsChildren(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_81,currValue))) {
      this.changed = true;
      this.context.groupSelectsChildren = currValue;
      this.changes['groupSelectsChildren'] = new import1.SimpleChange(this._expr_81,currValue);
      this._expr_81 = currValue;
    }
  }
  check_groupIncludeFooter(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_82,currValue))) {
      this.changed = true;
      this.context.groupIncludeFooter = currValue;
      this.changes['groupIncludeFooter'] = new import1.SimpleChange(this._expr_82,currValue);
      this._expr_82 = currValue;
    }
  }
  check_groupUseEntireRow(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_83,currValue))) {
      this.changed = true;
      this.context.groupUseEntireRow = currValue;
      this.changes['groupUseEntireRow'] = new import1.SimpleChange(this._expr_83,currValue);
      this._expr_83 = currValue;
    }
  }
  check_groupSuppressRow(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_84,currValue))) {
      this.changed = true;
      this.context.groupSuppressRow = currValue;
      this.changes['groupSuppressRow'] = new import1.SimpleChange(this._expr_84,currValue);
      this._expr_84 = currValue;
    }
  }
  check_groupSuppressBlankHeader(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_85,currValue))) {
      this.changed = true;
      this.context.groupSuppressBlankHeader = currValue;
      this.changes['groupSuppressBlankHeader'] = new import1.SimpleChange(this._expr_85,currValue);
      this._expr_85 = currValue;
    }
  }
  check_forPrint(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_86,currValue))) {
      this.changed = true;
      this.context.forPrint = currValue;
      this.changes['forPrint'] = new import1.SimpleChange(this._expr_86,currValue);
      this._expr_86 = currValue;
    }
  }
  check_suppressMenuHide(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_87,currValue))) {
      this.changed = true;
      this.context.suppressMenuHide = currValue;
      this.changes['suppressMenuHide'] = new import1.SimpleChange(this._expr_87,currValue);
      this._expr_87 = currValue;
    }
  }
  check_rowDeselection(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_88,currValue))) {
      this.changed = true;
      this.context.rowDeselection = currValue;
      this.changes['rowDeselection'] = new import1.SimpleChange(this._expr_88,currValue);
      this._expr_88 = currValue;
    }
  }
  check_unSortIcon(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_89,currValue))) {
      this.changed = true;
      this.context.unSortIcon = currValue;
      this.changes['unSortIcon'] = new import1.SimpleChange(this._expr_89,currValue);
      this._expr_89 = currValue;
    }
  }
  check_suppressMultiSort(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_90,currValue))) {
      this.changed = true;
      this.context.suppressMultiSort = currValue;
      this.changes['suppressMultiSort'] = new import1.SimpleChange(this._expr_90,currValue);
      this._expr_90 = currValue;
    }
  }
  check_suppressScrollLag(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_91,currValue))) {
      this.changed = true;
      this.context.suppressScrollLag = currValue;
      this.changes['suppressScrollLag'] = new import1.SimpleChange(this._expr_91,currValue);
      this._expr_91 = currValue;
    }
  }
  check_singleClickEdit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_92,currValue))) {
      this.changed = true;
      this.context.singleClickEdit = currValue;
      this.changes['singleClickEdit'] = new import1.SimpleChange(this._expr_92,currValue);
      this._expr_92 = currValue;
    }
  }
  check_suppressLoadingOverlay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_93,currValue))) {
      this.changed = true;
      this.context.suppressLoadingOverlay = currValue;
      this.changes['suppressLoadingOverlay'] = new import1.SimpleChange(this._expr_93,currValue);
      this._expr_93 = currValue;
    }
  }
  check_suppressNoRowsOverlay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_94,currValue))) {
      this.changed = true;
      this.context.suppressNoRowsOverlay = currValue;
      this.changes['suppressNoRowsOverlay'] = new import1.SimpleChange(this._expr_94,currValue);
      this._expr_94 = currValue;
    }
  }
  check_suppressAutoSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_95,currValue))) {
      this.changed = true;
      this.context.suppressAutoSize = currValue;
      this.changes['suppressAutoSize'] = new import1.SimpleChange(this._expr_95,currValue);
      this._expr_95 = currValue;
    }
  }
  check_suppressParentsInRowNodes(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_96,currValue))) {
      this.changed = true;
      this.context.suppressParentsInRowNodes = currValue;
      this.changes['suppressParentsInRowNodes'] = new import1.SimpleChange(this._expr_96,currValue);
      this._expr_96 = currValue;
    }
  }
  check_showToolPanel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_97,currValue))) {
      this.changed = true;
      this.context.showToolPanel = currValue;
      this.changes['showToolPanel'] = new import1.SimpleChange(this._expr_97,currValue);
      this._expr_97 = currValue;
    }
  }
  check_suppressColumnMoveAnimation(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_98,currValue))) {
      this.changed = true;
      this.context.suppressColumnMoveAnimation = currValue;
      this.changes['suppressColumnMoveAnimation'] = new import1.SimpleChange(this._expr_98,currValue);
      this._expr_98 = currValue;
    }
  }
  check_suppressMovableColumns(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_99,currValue))) {
      this.changed = true;
      this.context.suppressMovableColumns = currValue;
      this.changes['suppressMovableColumns'] = new import1.SimpleChange(this._expr_99,currValue);
      this._expr_99 = currValue;
    }
  }
  check_suppressFieldDotNotation(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_100,currValue))) {
      this.changed = true;
      this.context.suppressFieldDotNotation = currValue;
      this.changes['suppressFieldDotNotation'] = new import1.SimpleChange(this._expr_100,currValue);
      this._expr_100 = currValue;
    }
  }
  check_enableRangeSelection(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_101,currValue))) {
      this.changed = true;
      this.context.enableRangeSelection = currValue;
      this.changes['enableRangeSelection'] = new import1.SimpleChange(this._expr_101,currValue);
      this._expr_101 = currValue;
    }
  }
  check_suppressEnterprise(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_102,currValue))) {
      this.changed = true;
      this.context.suppressEnterprise = currValue;
      this.changes['suppressEnterprise'] = new import1.SimpleChange(this._expr_102,currValue);
      this._expr_102 = currValue;
    }
  }
  check_rowGroupPanelShow(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_103,currValue))) {
      this.changed = true;
      this.context.rowGroupPanelShow = currValue;
      this.changes['rowGroupPanelShow'] = new import1.SimpleChange(this._expr_103,currValue);
      this._expr_103 = currValue;
    }
  }
  check_pivotPanelShow(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_104,currValue))) {
      this.changed = true;
      this.context.pivotPanelShow = currValue;
      this.changes['pivotPanelShow'] = new import1.SimpleChange(this._expr_104,currValue);
      this._expr_104 = currValue;
    }
  }
  check_suppressContextMenu(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_105,currValue))) {
      this.changed = true;
      this.context.suppressContextMenu = currValue;
      this.changes['suppressContextMenu'] = new import1.SimpleChange(this._expr_105,currValue);
      this._expr_105 = currValue;
    }
  }
  check_suppressMenuFilterPanel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_106,currValue))) {
      this.changed = true;
      this.context.suppressMenuFilterPanel = currValue;
      this.changes['suppressMenuFilterPanel'] = new import1.SimpleChange(this._expr_106,currValue);
      this._expr_106 = currValue;
    }
  }
  check_suppressMenuMainPanel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_107,currValue))) {
      this.changed = true;
      this.context.suppressMenuMainPanel = currValue;
      this.changes['suppressMenuMainPanel'] = new import1.SimpleChange(this._expr_107,currValue);
      this._expr_107 = currValue;
    }
  }
  check_suppressMenuColumnPanel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_108,currValue))) {
      this.changed = true;
      this.context.suppressMenuColumnPanel = currValue;
      this.changes['suppressMenuColumnPanel'] = new import1.SimpleChange(this._expr_108,currValue);
      this._expr_108 = currValue;
    }
  }
  check_enableStatusBar(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_109,currValue))) {
      this.changed = true;
      this.context.enableStatusBar = currValue;
      this.changes['enableStatusBar'] = new import1.SimpleChange(this._expr_109,currValue);
      this._expr_109 = currValue;
    }
  }
  check_rememberGroupStateWhenNewData(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_110,currValue))) {
      this.changed = true;
      this.context.rememberGroupStateWhenNewData = currValue;
      this.changes['rememberGroupStateWhenNewData'] = new import1.SimpleChange(this._expr_110,currValue);
      this._expr_110 = currValue;
    }
  }
  check_enableCellChangeFlash(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_111,currValue))) {
      this.changed = true;
      this.context.enableCellChangeFlash = currValue;
      this.changes['enableCellChangeFlash'] = new import1.SimpleChange(this._expr_111,currValue);
      this._expr_111 = currValue;
    }
  }
  check_suppressDragLeaveHidesColumns(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_112,currValue))) {
      this.changed = true;
      this.context.suppressDragLeaveHidesColumns = currValue;
      this.changes['suppressDragLeaveHidesColumns'] = new import1.SimpleChange(this._expr_112,currValue);
      this._expr_112 = currValue;
    }
  }
  check_suppressMiddleClickScrolls(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_113,currValue))) {
      this.changed = true;
      this.context.suppressMiddleClickScrolls = currValue;
      this.changes['suppressMiddleClickScrolls'] = new import1.SimpleChange(this._expr_113,currValue);
      this._expr_113 = currValue;
    }
  }
  check_suppressPreventDefaultOnMouseWheel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_114,currValue))) {
      this.changed = true;
      this.context.suppressPreventDefaultOnMouseWheel = currValue;
      this.changes['suppressPreventDefaultOnMouseWheel'] = new import1.SimpleChange(this._expr_114,currValue);
      this._expr_114 = currValue;
    }
  }
  check_suppressUseColIdForGroups(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_115,currValue))) {
      this.changed = true;
      this.context.suppressUseColIdForGroups = currValue;
      this.changes['suppressUseColIdForGroups'] = new import1.SimpleChange(this._expr_115,currValue);
      this._expr_115 = currValue;
    }
  }
  check_suppressCopyRowsToClipboard(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_116,currValue))) {
      this.changed = true;
      this.context.suppressCopyRowsToClipboard = currValue;
      this.changes['suppressCopyRowsToClipboard'] = new import1.SimpleChange(this._expr_116,currValue);
      this._expr_116 = currValue;
    }
  }
  check_pivotMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_117,currValue))) {
      this.changed = true;
      this.context.pivotMode = currValue;
      this.changes['pivotMode'] = new import1.SimpleChange(this._expr_117,currValue);
      this._expr_117 = currValue;
    }
  }
  check_suppressAggFuncInHeader(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_118,currValue))) {
      this.changed = true;
      this.context.suppressAggFuncInHeader = currValue;
      this.changes['suppressAggFuncInHeader'] = new import1.SimpleChange(this._expr_118,currValue);
      this._expr_118 = currValue;
    }
  }
  check_suppressColumnVirtualisation(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_119,currValue))) {
      this.changed = true;
      this.context.suppressColumnVirtualisation = currValue;
      this.changes['suppressColumnVirtualisation'] = new import1.SimpleChange(this._expr_119,currValue);
      this._expr_119 = currValue;
    }
  }
  check_suppressFocusAfterRefresh(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_120,currValue))) {
      this.changed = true;
      this.context.suppressFocusAfterRefresh = currValue;
      this.changes['suppressFocusAfterRefresh'] = new import1.SimpleChange(this._expr_120,currValue);
      this._expr_120 = currValue;
    }
  }
  check_functionsPassive(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_121,currValue))) {
      this.changed = true;
      this.context.functionsPassive = currValue;
      this.changes['functionsPassive'] = new import1.SimpleChange(this._expr_121,currValue);
      this._expr_121 = currValue;
    }
  }
  check_functionsReadOnly(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_122,currValue))) {
      this.changed = true;
      this.context.functionsReadOnly = currValue;
      this.changes['functionsReadOnly'] = new import1.SimpleChange(this._expr_122,currValue);
      this._expr_122 = currValue;
    }
  }
  check_defaultColGroupDef(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_123,currValue))) {
      this.changed = true;
      this.context.defaultColGroupDef = currValue;
      this.changes['defaultColGroupDef'] = new import1.SimpleChange(this._expr_123,currValue);
      this._expr_123 = currValue;
    }
  }
  check_editType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_124,currValue))) {
      this.changed = true;
      this.context.editType = currValue;
      this.changes['editType'] = new import1.SimpleChange(this._expr_124,currValue);
      this._expr_124 = currValue;
    }
  }
  check_scrollbarWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_125,currValue))) {
      this.changed = true;
      this.context.scrollbarWidth = currValue;
      this.changes['scrollbarWidth'] = new import1.SimpleChange(this._expr_125,currValue);
      this._expr_125 = currValue;
    }
  }
  check_groupRowInnerRendererFramework(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_126,currValue))) {
      this.changed = true;
      this.context.groupRowInnerRendererFramework = currValue;
      this.changes['groupRowInnerRendererFramework'] = new import1.SimpleChange(this._expr_126,currValue);
      this._expr_126 = currValue;
    }
  }
  check_groupRowRendererFramework(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_127,currValue))) {
      this.changed = true;
      this.context.groupRowRendererFramework = currValue;
      this.changes['groupRowRendererFramework'] = new import1.SimpleChange(this._expr_127,currValue);
      this._expr_127 = currValue;
    }
  }
  check_fullWidthCellRendererFramework(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_128,currValue))) {
      this.changed = true;
      this.context.fullWidthCellRendererFramework = currValue;
      this.changes['fullWidthCellRendererFramework'] = new import1.SimpleChange(this._expr_128,currValue);
      this._expr_128 = currValue;
    }
  }
  check_processSecondaryColDef(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_129,currValue))) {
      this.changed = true;
      this.context.processSecondaryColDef = currValue;
      this.changes['processSecondaryColDef'] = new import1.SimpleChange(this._expr_129,currValue);
      this._expr_129 = currValue;
    }
  }
  check_processSecondaryColGroupDef(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_130,currValue))) {
      this.changed = true;
      this.context.processSecondaryColGroupDef = currValue;
      this.changes['processSecondaryColGroupDef'] = new import1.SimpleChange(this._expr_130,currValue);
      this._expr_130 = currValue;
    }
  }
  check_suppressRowHoverClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_131,currValue))) {
      this.changed = true;
      this.context.suppressRowHoverClass = currValue;
      this.changes['suppressRowHoverClass'] = new import1.SimpleChange(this._expr_131,currValue);
      this._expr_131 = currValue;
    }
  }
  check_suppressTouch(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_132,currValue))) {
      this.changed = true;
      this.context.suppressTouch = currValue;
      this.changes['suppressTouch'] = new import1.SimpleChange(this._expr_132,currValue);
      this._expr_132 = currValue;
    }
  }
  check_animateRows(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_133,currValue))) {
      this.changed = true;
      this.context.animateRows = currValue;
      this.changes['animateRows'] = new import1.SimpleChange(this._expr_133,currValue);
      this._expr_133 = currValue;
    }
  }
  check_groupSelectsFiltered(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_134,currValue))) {
      this.changed = true;
      this.context.groupSelectsFiltered = currValue;
      this.changes['groupSelectsFiltered'] = new import1.SimpleChange(this._expr_134,currValue);
      this._expr_134 = currValue;
    }
  }
  check_groupRemoveSingleChildren(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_135,currValue))) {
      this.changed = true;
      this.context.groupRemoveSingleChildren = currValue;
      this.changes['groupRemoveSingleChildren'] = new import1.SimpleChange(this._expr_135,currValue);
      this._expr_135 = currValue;
    }
  }
  check_getBusinessKeyForNode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_136,currValue))) {
      this.changed = true;
      this.context.getBusinessKeyForNode = currValue;
      this.changes['getBusinessKeyForNode'] = new import1.SimpleChange(this._expr_136,currValue);
      this._expr_136 = currValue;
    }
  }
  check_checkboxSelection(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_137,currValue))) {
      this.changed = true;
      this.context.checkboxSelection = currValue;
      this.changes['checkboxSelection'] = new import1.SimpleChange(this._expr_137,currValue);
      this._expr_137 = currValue;
    }
  }
  check_enableRtl(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_138,currValue))) {
      this.changed = true;
      this.context.enableRtl = currValue;
      this.changes['enableRtl'] = new import1.SimpleChange(this._expr_138,currValue);
      this._expr_138 = currValue;
    }
  }
  check_suppressClickEdit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_139,currValue))) {
      this.changed = true;
      this.context.suppressClickEdit = currValue;
      this.changes['suppressClickEdit'] = new import1.SimpleChange(this._expr_139,currValue);
      this._expr_139 = currValue;
    }
  }
  check_enableRtlSupport(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_140,currValue))) {
      this.changed = true;
      this.context.enableRtlSupport = currValue;
      this.changes['enableRtlSupport'] = new import1.SimpleChange(this._expr_140,currValue);
      this._expr_140 = currValue;
    }
  }
  check_excelStyles(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_141,currValue))) {
      this.changed = true;
      this.context.excelStyles = currValue;
      this.changes['excelStyles'] = new import1.SimpleChange(this._expr_141,currValue);
      this._expr_141 = currValue;
    }
  }
  check_dateComponent(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_142,currValue))) {
      this.changed = true;
      this.context.dateComponent = currValue;
      this.changes['dateComponent'] = new import1.SimpleChange(this._expr_142,currValue);
      this._expr_142 = currValue;
    }
  }
  check_sendToClipboard(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_143,currValue))) {
      this.changed = true;
      this.context.sendToClipboard = currValue;
      this.changes['sendToClipboard'] = new import1.SimpleChange(this._expr_143,currValue);
      this._expr_143 = currValue;
    }
  }
  check_navigateToNextCell(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_144,currValue))) {
      this.changed = true;
      this.context.navigateToNextCell = currValue;
      this.changes['navigateToNextCell'] = new import1.SimpleChange(this._expr_144,currValue);
      this._expr_144 = currValue;
    }
  }
  check_tabToNextCell(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_145,currValue))) {
      this.changed = true;
      this.context.tabToNextCell = currValue;
      this.changes['tabToNextCell'] = new import1.SimpleChange(this._expr_145,currValue);
      this._expr_145 = currValue;
    }
  }
  check_processCellFromClipboard(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_146,currValue))) {
      this.changed = true;
      this.context.processCellFromClipboard = currValue;
      this.changes['processCellFromClipboard'] = new import1.SimpleChange(this._expr_146,currValue);
      this._expr_146 = currValue;
    }
  }
  check_getDocument(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_147,currValue))) {
      this.changed = true;
      this.context.getDocument = currValue;
      this.changes['getDocument'] = new import1.SimpleChange(this._expr_147,currValue);
      this._expr_147 = currValue;
    }
  }
  check_enableGroupEdit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_148,currValue))) {
      this.changed = true;
      this.context.enableGroupEdit = currValue;
      this.changes['enableGroupEdit'] = new import1.SimpleChange(this._expr_148,currValue);
      this._expr_148 = currValue;
    }
  }
  check_embedFullWidthRows(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_149,currValue))) {
      this.changed = true;
      this.context.embedFullWidthRows = currValue;
      this.changes['embedFullWidthRows'] = new import1.SimpleChange(this._expr_149,currValue);
      this._expr_149 = currValue;
    }
  }
  detectChangesInInputProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this.changes);
      this.changes = {};
    } }
    return changed;
  }
  detectChangesInHostProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
}
var renderType_AgGridNg2_Host:import4.RenderComponentType = (null as any);
class _View_AgGridNg2_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _AgGridNg2_0_5:Wrapper_AgGridNg2;
  _query_AgGridColumn_0_0:import6.QueryList<any>;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement) {
    super(_View_AgGridNg2_Host0,renderType_AgGridNg2_Host,import8.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = import2.selectOrCreateRenderHostElement(this.renderer,'ag-grid-ng2',import2.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_AgGridNg20(this.viewUtils,this.injector(0),this._appEl_0);
    this._AgGridNg2_0_5 = new Wrapper_AgGridNg2(new import9.ElementRef(this._el_0),this._appEl_0.vcRef,this.parentInjector.get(import10.Ng2FrameworkFactory));
    this._query_AgGridColumn_0_0 = new import6.QueryList<any>();
    this._appEl_0.initComponent(this._AgGridNg2_0_5.context,([] as any[]),compView_0);
    compView_0.create(this._AgGridNg2_0_5.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._appEl_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.AgGridNg2) && (0 === requestNodeIndex))) { return this._AgGridNg2_0_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._AgGridNg2_0_5.detectChangesInInputProps(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) { if (this._query_AgGridColumn_0_0.dirty) {
      this._query_AgGridColumn_0_0.reset(([] as any[]));
      this._AgGridNg2_0_5.context.columns = this._query_AgGridColumn_0_0;
      this._query_AgGridColumn_0_0.notifyOnChanges();
    } }
    this._AgGridNg2_0_5.detectChangesInHostProps(this,this._el_0,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._AgGridNg2_0_5.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this._AgGridNg2_0_5.context.ngOnDestroy();
  }
}
function viewFactory_AgGridNg2_Host0(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_AgGridNg2_Host === (null as any))) { (renderType_AgGridNg2_Host = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_AgGridNg2_Host0(viewUtils,parentInjector,declarationEl);
}
export const AgGridNg2NgFactory:import12.ComponentFactory<import0.AgGridNg2> = new import12.ComponentFactory<import0.AgGridNg2>('ag-grid-ng2',viewFactory_AgGridNg2_Host0,import0.AgGridNg2);
const styles_AgGridNg2:any[] = ([] as any[]);
var renderType_AgGridNg2:import4.RenderComponentType = (null as any);
class _View_AgGridNg20 extends import3.AppView<import0.AgGridNg2> {
  constructor(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement) {
    super(_View_AgGridNg20,renderType_AgGridNg2,import8.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.init(([] as any[]),([] as any[]),([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_AgGridNg20(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement):import3.AppView<import0.AgGridNg2> {
  if ((renderType_AgGridNg2 === (null as any))) { (renderType_AgGridNg2 = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,styles_AgGridNg2,{})); }
  return new _View_AgGridNg20(viewUtils,parentInjector,declarationEl);
}
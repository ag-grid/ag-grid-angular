/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '../../src/agGridColumn';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/linker/query_list';
import * as import7 from '@angular/core/src/di/injector';
import * as import8 from '@angular/core/src/linker/view_type';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
export class Wrapper_AgGridColumn {
  context:import0.AgGridColumn;
  changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  /*private*/ _expr_21:any;
  /*private*/ _expr_22:any;
  /*private*/ _expr_23:any;
  /*private*/ _expr_24:any;
  /*private*/ _expr_25:any;
  /*private*/ _expr_26:any;
  /*private*/ _expr_27:any;
  /*private*/ _expr_28:any;
  /*private*/ _expr_29:any;
  /*private*/ _expr_30:any;
  /*private*/ _expr_31:any;
  /*private*/ _expr_32:any;
  /*private*/ _expr_33:any;
  /*private*/ _expr_34:any;
  /*private*/ _expr_35:any;
  /*private*/ _expr_36:any;
  /*private*/ _expr_37:any;
  /*private*/ _expr_38:any;
  /*private*/ _expr_39:any;
  /*private*/ _expr_40:any;
  /*private*/ _expr_41:any;
  /*private*/ _expr_42:any;
  /*private*/ _expr_43:any;
  /*private*/ _expr_44:any;
  /*private*/ _expr_45:any;
  /*private*/ _expr_46:any;
  /*private*/ _expr_47:any;
  /*private*/ _expr_48:any;
  /*private*/ _expr_49:any;
  /*private*/ _expr_50:any;
  /*private*/ _expr_51:any;
  /*private*/ _expr_52:any;
  /*private*/ _expr_53:any;
  /*private*/ _expr_54:any;
  /*private*/ _expr_55:any;
  /*private*/ _expr_56:any;
  /*private*/ _expr_57:any;
  /*private*/ _expr_58:any;
  /*private*/ _expr_59:any;
  /*private*/ _expr_60:any;
  /*private*/ _expr_61:any;
  /*private*/ _expr_62:any;
  /*private*/ _expr_63:any;
  /*private*/ _expr_64:any;
  /*private*/ _expr_65:any;
  /*private*/ _expr_66:any;
  /*private*/ _expr_67:any;
  /*private*/ _expr_68:any;
  /*private*/ _expr_69:any;
  /*private*/ _expr_70:any;
  constructor() {
    this.changed = false;
    this.context = new import0.AgGridColumn();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
    this._expr_19 = import1.UNINITIALIZED;
    this._expr_20 = import1.UNINITIALIZED;
    this._expr_21 = import1.UNINITIALIZED;
    this._expr_22 = import1.UNINITIALIZED;
    this._expr_23 = import1.UNINITIALIZED;
    this._expr_24 = import1.UNINITIALIZED;
    this._expr_25 = import1.UNINITIALIZED;
    this._expr_26 = import1.UNINITIALIZED;
    this._expr_27 = import1.UNINITIALIZED;
    this._expr_28 = import1.UNINITIALIZED;
    this._expr_29 = import1.UNINITIALIZED;
    this._expr_30 = import1.UNINITIALIZED;
    this._expr_31 = import1.UNINITIALIZED;
    this._expr_32 = import1.UNINITIALIZED;
    this._expr_33 = import1.UNINITIALIZED;
    this._expr_34 = import1.UNINITIALIZED;
    this._expr_35 = import1.UNINITIALIZED;
    this._expr_36 = import1.UNINITIALIZED;
    this._expr_37 = import1.UNINITIALIZED;
    this._expr_38 = import1.UNINITIALIZED;
    this._expr_39 = import1.UNINITIALIZED;
    this._expr_40 = import1.UNINITIALIZED;
    this._expr_41 = import1.UNINITIALIZED;
    this._expr_42 = import1.UNINITIALIZED;
    this._expr_43 = import1.UNINITIALIZED;
    this._expr_44 = import1.UNINITIALIZED;
    this._expr_45 = import1.UNINITIALIZED;
    this._expr_46 = import1.UNINITIALIZED;
    this._expr_47 = import1.UNINITIALIZED;
    this._expr_48 = import1.UNINITIALIZED;
    this._expr_49 = import1.UNINITIALIZED;
    this._expr_50 = import1.UNINITIALIZED;
    this._expr_51 = import1.UNINITIALIZED;
    this._expr_52 = import1.UNINITIALIZED;
    this._expr_53 = import1.UNINITIALIZED;
    this._expr_54 = import1.UNINITIALIZED;
    this._expr_55 = import1.UNINITIALIZED;
    this._expr_56 = import1.UNINITIALIZED;
    this._expr_57 = import1.UNINITIALIZED;
    this._expr_58 = import1.UNINITIALIZED;
    this._expr_59 = import1.UNINITIALIZED;
    this._expr_60 = import1.UNINITIALIZED;
    this._expr_61 = import1.UNINITIALIZED;
    this._expr_62 = import1.UNINITIALIZED;
    this._expr_63 = import1.UNINITIALIZED;
    this._expr_64 = import1.UNINITIALIZED;
    this._expr_65 = import1.UNINITIALIZED;
    this._expr_66 = import1.UNINITIALIZED;
    this._expr_67 = import1.UNINITIALIZED;
    this._expr_68 = import1.UNINITIALIZED;
    this._expr_69 = import1.UNINITIALIZED;
    this._expr_70 = import1.UNINITIALIZED;
  }
  check_headerName(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this.changed = true;
      this.context.headerName = currValue;
      this._expr_0 = currValue;
    }
  }
  check_columnGroupShow(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this.changed = true;
      this.context.columnGroupShow = currValue;
      this._expr_1 = currValue;
    }
  }
  check_headerClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this.changed = true;
      this.context.headerClass = currValue;
      this._expr_2 = currValue;
    }
  }
  check_toolPanelClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this.changed = true;
      this.context.toolPanelClass = currValue;
      this._expr_3 = currValue;
    }
  }
  check_headerValueGetter(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this.changed = true;
      this.context.headerValueGetter = currValue;
      this._expr_4 = currValue;
    }
  }
  check_pivotKeys(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this.changed = true;
      this.context.pivotKeys = currValue;
      this._expr_5 = currValue;
    }
  }
  check_suppressToolPanel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this.changed = true;
      this.context.suppressToolPanel = currValue;
      this._expr_6 = currValue;
    }
  }
  check_children(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this.changed = true;
      this.context.children = currValue;
      this._expr_7 = currValue;
    }
  }
  check_groupId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this.changed = true;
      this.context.groupId = currValue;
      this._expr_8 = currValue;
    }
  }
  check_openByDefault(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this.changed = true;
      this.context.openByDefault = currValue;
      this._expr_9 = currValue;
    }
  }
  check_marryChildren(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this.changed = true;
      this.context.marryChildren = currValue;
      this._expr_10 = currValue;
    }
  }
  check_colId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this.changed = true;
      this.context.colId = currValue;
      this._expr_11 = currValue;
    }
  }
  check_sort(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this.changed = true;
      this.context.sort = currValue;
      this._expr_12 = currValue;
    }
  }
  check_sortedAt(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this.changed = true;
      this.context.sortedAt = currValue;
      this._expr_13 = currValue;
    }
  }
  check_sortingOrder(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_14,currValue))) {
      this.changed = true;
      this.context.sortingOrder = currValue;
      this._expr_14 = currValue;
    }
  }
  check_field(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_15,currValue))) {
      this.changed = true;
      this.context.field = currValue;
      this._expr_15 = currValue;
    }
  }
  check_hide(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_16,currValue))) {
      this.changed = true;
      this.context.hide = currValue;
      this._expr_16 = currValue;
    }
  }
  check_pinned(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_17,currValue))) {
      this.changed = true;
      this.context.pinned = currValue;
      this._expr_17 = currValue;
    }
  }
  check_tooltipField(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_18,currValue))) {
      this.changed = true;
      this.context.tooltipField = currValue;
      this._expr_18 = currValue;
    }
  }
  check_headerTooltip(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_19,currValue))) {
      this.changed = true;
      this.context.headerTooltip = currValue;
      this._expr_19 = currValue;
    }
  }
  check_valueGetter(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_20,currValue))) {
      this.changed = true;
      this.context.valueGetter = currValue;
      this._expr_20 = currValue;
    }
  }
  check_keyCreator(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_21,currValue))) {
      this.changed = true;
      this.context.keyCreator = currValue;
      this._expr_21 = currValue;
    }
  }
  check_headerCellRenderer(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_22,currValue))) {
      this.changed = true;
      this.context.headerCellRenderer = currValue;
      this._expr_22 = currValue;
    }
  }
  check_headerCellTemplate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_23,currValue))) {
      this.changed = true;
      this.context.headerCellTemplate = currValue;
      this._expr_23 = currValue;
    }
  }
  check_width(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_24,currValue))) {
      this.changed = true;
      this.context.width = currValue;
      this._expr_24 = currValue;
    }
  }
  check_minWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_25,currValue))) {
      this.changed = true;
      this.context.minWidth = currValue;
      this._expr_25 = currValue;
    }
  }
  check_maxWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_26,currValue))) {
      this.changed = true;
      this.context.maxWidth = currValue;
      this._expr_26 = currValue;
    }
  }
  check_cellClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_27,currValue))) {
      this.changed = true;
      this.context.cellClass = currValue;
      this._expr_27 = currValue;
    }
  }
  check_cellStyle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_28,currValue))) {
      this.changed = true;
      this.context.cellStyle = currValue;
      this._expr_28 = currValue;
    }
  }
  check_cellRenderer(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_29,currValue))) {
      this.changed = true;
      this.context.cellRenderer = currValue;
      this._expr_29 = currValue;
    }
  }
  check_cellRendererFramework(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_30,currValue))) {
      this.changed = true;
      this.context.cellRendererFramework = currValue;
      this._expr_30 = currValue;
    }
  }
  check_cellRendererParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_31,currValue))) {
      this.changed = true;
      this.context.cellRendererParams = currValue;
      this._expr_31 = currValue;
    }
  }
  check_cellEditor(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_32,currValue))) {
      this.changed = true;
      this.context.cellEditor = currValue;
      this._expr_32 = currValue;
    }
  }
  check_cellEditorFramework(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_33,currValue))) {
      this.changed = true;
      this.context.cellEditorFramework = currValue;
      this._expr_33 = currValue;
    }
  }
  check_cellEditorParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_34,currValue))) {
      this.changed = true;
      this.context.cellEditorParams = currValue;
      this._expr_34 = currValue;
    }
  }
  check_floatingCellRenderer(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_35,currValue))) {
      this.changed = true;
      this.context.floatingCellRenderer = currValue;
      this._expr_35 = currValue;
    }
  }
  check_floatingCellRendererFramework(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_36,currValue))) {
      this.changed = true;
      this.context.floatingCellRendererFramework = currValue;
      this._expr_36 = currValue;
    }
  }
  check_floatingCellRendererParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_37,currValue))) {
      this.changed = true;
      this.context.floatingCellRendererParams = currValue;
      this._expr_37 = currValue;
    }
  }
  check_cellFormatter(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_38,currValue))) {
      this.changed = true;
      this.context.cellFormatter = currValue;
      this._expr_38 = currValue;
    }
  }
  check_floatingCellFormatter(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_39,currValue))) {
      this.changed = true;
      this.context.floatingCellFormatter = currValue;
      this._expr_39 = currValue;
    }
  }
  check_aggFunc(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_40,currValue))) {
      this.changed = true;
      this.context.aggFunc = currValue;
      this._expr_40 = currValue;
    }
  }
  check_rowGroupIndex(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_41,currValue))) {
      this.changed = true;
      this.context.rowGroupIndex = currValue;
      this._expr_41 = currValue;
    }
  }
  check_pivotIndex(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_42,currValue))) {
      this.changed = true;
      this.context.pivotIndex = currValue;
      this._expr_42 = currValue;
    }
  }
  check_comparator(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_43,currValue))) {
      this.changed = true;
      this.context.comparator = currValue;
      this._expr_43 = currValue;
    }
  }
  check_checkboxSelection(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_44,currValue))) {
      this.changed = true;
      this.context.checkboxSelection = currValue;
      this._expr_44 = currValue;
    }
  }
  check_suppressMenu(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_45,currValue))) {
      this.changed = true;
      this.context.suppressMenu = currValue;
      this._expr_45 = currValue;
    }
  }
  check_suppressSorting(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_46,currValue))) {
      this.changed = true;
      this.context.suppressSorting = currValue;
      this._expr_46 = currValue;
    }
  }
  check_suppressMovable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_47,currValue))) {
      this.changed = true;
      this.context.suppressMovable = currValue;
      this._expr_47 = currValue;
    }
  }
  check_suppressFilter(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_48,currValue))) {
      this.changed = true;
      this.context.suppressFilter = currValue;
      this._expr_48 = currValue;
    }
  }
  check_unSortIcon(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_49,currValue))) {
      this.changed = true;
      this.context.unSortIcon = currValue;
      this._expr_49 = currValue;
    }
  }
  check_suppressSizeToFit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_50,currValue))) {
      this.changed = true;
      this.context.suppressSizeToFit = currValue;
      this._expr_50 = currValue;
    }
  }
  check_suppressResize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_51,currValue))) {
      this.changed = true;
      this.context.suppressResize = currValue;
      this._expr_51 = currValue;
    }
  }
  check_suppressAutoSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_52,currValue))) {
      this.changed = true;
      this.context.suppressAutoSize = currValue;
      this._expr_52 = currValue;
    }
  }
  check_enableRowGroup(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_53,currValue))) {
      this.changed = true;
      this.context.enableRowGroup = currValue;
      this._expr_53 = currValue;
    }
  }
  check_enablePivot(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_54,currValue))) {
      this.changed = true;
      this.context.enablePivot = currValue;
      this._expr_54 = currValue;
    }
  }
  check_enableValue(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_55,currValue))) {
      this.changed = true;
      this.context.enableValue = currValue;
      this._expr_55 = currValue;
    }
  }
  check_editable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_56,currValue))) {
      this.changed = true;
      this.context.editable = currValue;
      this._expr_56 = currValue;
    }
  }
  check_getQuickFilterText(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_57,currValue))) {
      this.changed = true;
      this.context.getQuickFilterText = currValue;
      this._expr_57 = currValue;
    }
  }
  check_suppressNavigable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_58,currValue))) {
      this.changed = true;
      this.context.suppressNavigable = currValue;
      this._expr_58 = currValue;
    }
  }
  check_newValueHandler(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_59,currValue))) {
      this.changed = true;
      this.context.newValueHandler = currValue;
      this._expr_59 = currValue;
    }
  }
  check_volatile(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_60,currValue))) {
      this.changed = true;
      this.context.volatile = currValue;
      this._expr_60 = currValue;
    }
  }
  check_filter(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_61,currValue))) {
      this.changed = true;
      this.context.filter = currValue;
      this._expr_61 = currValue;
    }
  }
  check_filterFramework(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_62,currValue))) {
      this.changed = true;
      this.context.filterFramework = currValue;
      this._expr_62 = currValue;
    }
  }
  check_filterParams(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_63,currValue))) {
      this.changed = true;
      this.context.filterParams = currValue;
      this._expr_63 = currValue;
    }
  }
  check_cellClassRules(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_64,currValue))) {
      this.changed = true;
      this.context.cellClassRules = currValue;
      this._expr_64 = currValue;
    }
  }
  check_onCellValueChanged(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_65,currValue))) {
      this.changed = true;
      this.context.onCellValueChanged = currValue;
      this._expr_65 = currValue;
    }
  }
  check_onCellClicked(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_66,currValue))) {
      this.changed = true;
      this.context.onCellClicked = currValue;
      this._expr_66 = currValue;
    }
  }
  check_onCellDoubleClicked(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_67,currValue))) {
      this.changed = true;
      this.context.onCellDoubleClicked = currValue;
      this._expr_67 = currValue;
    }
  }
  check_onCellContextMenu(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_68,currValue))) {
      this.changed = true;
      this.context.onCellContextMenu = currValue;
      this._expr_68 = currValue;
    }
  }
  check_icons(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_69,currValue))) {
      this.changed = true;
      this.context.icons = currValue;
      this._expr_69 = currValue;
    }
  }
  check_enableCellChangeFlash(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_70,currValue))) {
      this.changed = true;
      this.context.enableCellChangeFlash = currValue;
      this._expr_70 = currValue;
    }
  }
  detectChangesInInputProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
  detectChangesInHostProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
}
var renderType_AgGridColumn_Host:import4.RenderComponentType = (null as any);
class _View_AgGridColumn_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _AgGridColumn_0_4:Wrapper_AgGridColumn;
  _query_AgGridColumn_0_0:import6.QueryList<any>;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement) {
    super(_View_AgGridColumn_Host0,renderType_AgGridColumn_Host,import8.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = import2.selectOrCreateRenderHostElement(this.renderer,'ag-grid-column',import2.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_AgGridColumn0(this.viewUtils,this.injector(0),this._appEl_0);
    this._AgGridColumn_0_4 = new Wrapper_AgGridColumn();
    this._query_AgGridColumn_0_0 = new import6.QueryList<any>();
    this._appEl_0.initComponent(this._AgGridColumn_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._AgGridColumn_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.AgGridColumn) && (0 === requestNodeIndex))) { return this._AgGridColumn_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._AgGridColumn_0_4.detectChangesInInputProps(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) { if (this._query_AgGridColumn_0_0.dirty) {
      this._query_AgGridColumn_0_0.reset([this._AgGridColumn_0_4.context]);
      this._AgGridColumn_0_4.context.childColumns = this._query_AgGridColumn_0_0;
      this._query_AgGridColumn_0_0.notifyOnChanges();
    } }
    this._AgGridColumn_0_4.detectChangesInHostProps(this,this._el_0,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_AgGridColumn_Host0(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_AgGridColumn_Host === (null as any))) { (renderType_AgGridColumn_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_AgGridColumn_Host0(viewUtils,parentInjector,declarationEl);
}
export const AgGridColumnNgFactory:import10.ComponentFactory<import0.AgGridColumn> = new import10.ComponentFactory<import0.AgGridColumn>('ag-grid-column',viewFactory_AgGridColumn_Host0,import0.AgGridColumn);
const styles_AgGridColumn:any[] = ([] as any[]);
var renderType_AgGridColumn:import4.RenderComponentType = (null as any);
class _View_AgGridColumn0 extends import3.AppView<import0.AgGridColumn> {
  constructor(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement) {
    super(_View_AgGridColumn0,renderType_AgGridColumn,import8.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.init(([] as any[]),([] as any[]),([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_AgGridColumn0(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement):import3.AppView<import0.AgGridColumn> {
  if ((renderType_AgGridColumn === (null as any))) { (renderType_AgGridColumn = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,styles_AgGridColumn,{})); }
  return new _View_AgGridColumn0(viewUtils,parentInjector,declarationEl);
}